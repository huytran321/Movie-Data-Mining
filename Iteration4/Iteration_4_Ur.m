% load dataset
T = readtable("feature number with class.csv");
% convert feature columns to matrix
data = [T{:,1} T{:,3:12}];

means = mean(data);
vars = var(data);
stdevs = std(data);

% set up variables
[nrows, ncols] = size(data);
X = zeros([nrows,ncols]);

% Mean center data 
for i=1:ncols 
    for j=1:nrows 
        X(j,i) = -(means(:,i) - data(j,i)); 
    end 
end 
mean(X)

% Scale data
for i=1:ncols 
    for j=1:nrows 
        X(j,i) = X(j,i) / stdevs(:,i); 
    end 
end         
var(X)

% X is the original dataset 
% Ur will be the transformed dataset  
% S is covariance matrix (not normalized) 
%
labels = data(:,1);
[U S V] = svd(X,0);
U(:,1) = labels;
%Randomize U and attach the region label
U = U(randperm(size(U, 1)),:);
randomizedULabels = U(:,1);
U(:,1) = randomizedULabels;

%Makes the randomize U become Ur and then label as r
Ur = U*S;
Ur(:,1) = randomizedULabels;
features = {'Streaming Platform','Year','Age','IMDb Score','Rotten Tomatoes Score (/100)',...
    'Runtime','Genre','Primary Country','Secondary Country',...
    'Primary Language','Secondary Language'};

Table_Ur = array2table(Ur,'VariableNames',features);
Table_U = array2table(U,'VariableNames',features);

%training the data
results= trainClassifier(Table_Ur);

%Information about the bagged Trees
info = results.ClassificationEnsemble;

%Predictions for 3 movies, has an 97% accuracy 
prediction1 = results.predictFcn(Table_Ur(432,:))
actualType1 = T(432,1)
prediction2 = results.predictFcn(Table_Ur(3000,:))
actualType2 = T(3000,1)
prediction3 = results.predictFcn(Table_Ur(6000,:))
actualType3 = T(6000,1)

function [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% Returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: A table containing the same predictor and response
%       columns as those imported into the app.
%
%  Output:
%      trainedClassifier: A struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: A function to make predictions on new
%       data.
%
%      validationAccuracy: A double containing the accuracy in percent. In
%       the app, the History list displays this overall accuracy score for
%       each model.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 16-Dec-2020 18:35:29


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'Year', 'Age', 'IMDb Score', 'Rotten Tomatoes Score (/100)', 'Runtime', 'Genre', 'Primary Country', 'Secondary Country', 'Primary Language', 'Secondary Language'};
predictors = inputTable(:, predictorNames);
response = inputTable.('Streaming Platform');
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false];

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
template = templateTree(...
    'MaxNumSplits', 8954);
classificationEnsemble = fitcensemble(...
    predictors, ...
    response, ...
    'Method', 'Bag', ...
    'NumLearningCycles', 30, ...
    'Learners', template, ...
    'ClassNames', [1; 2; 3]);

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
ensemblePredictFcn = @(x) predict(classificationEnsemble, x);
trainedClassifier.predictFcn = @(x) ensemblePredictFcn(predictorExtractionFcn(x));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = {'Age', 'Genre', 'IMDb Score', 'Primary Country', 'Primary Language', 'Rotten Tomatoes Score (/100)', 'Runtime', 'Secondary Country', 'Secondary Language', 'Year'};
trainedClassifier.ClassificationEnsemble = classificationEnsemble;
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2020a.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'Year', 'Age', 'IMDb Score', 'Rotten Tomatoes Score (/100)', 'Runtime', 'Genre', 'Primary Country', 'Secondary Country', 'Primary Language', 'Secondary Language'};
predictors = inputTable(:, predictorNames);
response = inputTable.('Streaming Platform');
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false];

% Set up holdout validation
cvp = cvpartition(response, 'Holdout', 0.25);
trainingPredictors = predictors(cvp.training, :);
trainingResponse = response(cvp.training, :);
trainingIsCategoricalPredictor = isCategoricalPredictor;

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
template = templateTree(...
    'MaxNumSplits', 8954);
classificationEnsemble = fitcensemble(...
    trainingPredictors, ...
    trainingResponse, ...
    'Method', 'Bag', ...
    'NumLearningCycles', 30, ...
    'Learners', template, ...
    'ClassNames', [1; 2; 3]);

% Create the result struct with predict function
ensemblePredictFcn = @(x) predict(classificationEnsemble, x);
validationPredictFcn = @(x) ensemblePredictFcn(x);

% Add additional fields to the result struct


% Compute validation predictions
validationPredictors = predictors(cvp.test, :);
validationResponse = response(cvp.test, :);
[validationPredictions, validationScores] = validationPredictFcn(validationPredictors);

% Compute validation accuracy
correctPredictions = (validationPredictions == validationResponse);
isMissing = isnan(validationResponse);
correctPredictions = correctPredictions(~isMissing);
validationAccuracy = sum(correctPredictions)/length(correctPredictions);
end

